- Icement's Guide to Optimizations -
This should tell you how code using the .mcfunction language can be optimized.

________________________________________________________
| Rule 1. Don't have commands with repeating selectors |
If there are some commands that do different things but targets entites with the same/very similar arguments.

--- Before Example
execute as @e[tag=exampletag] at @s run say womp womp 
execute as @e[tag=exampletag] at @s run summon wither
execute as @e[tag=exampletag] at @s run effect give @s minecraft:strength infinite 255
---

Consider making it 1 command and a function.

--- After Example
- example1.mcfunction
execute as @e[tag=exampletag] at @s run function example:example2

- example2.mcfunction
say womp womp
summon wither
effect give @s minecraft:strength infinite 255
---

This reduces the amount of @e's which gives more performance to our data pack which is also for a another rule.

______________________________________________________________________
| Rule 2. Don't use too much @e's or atleast use selector arguements |
@e targets all entites which can be expensive so try to reduce but if you have to use them. Try to reduce the amount of entites it targets by using selector arguements. You can also utilize tag trees which will be explained in Rule 5. This also brings yet another rule I will mention below right now.

_____________________________________________________________
| Rule 3. Order of selector arguements can cost performance |
The order of which arguements get executed can cost TPS performance and I will show examples of this:

--- Before Example
@e[type=zombie,tag=example_9,limit=1]
---

This costs more performance due to how the game sorts by zombies first which checks all zombies and then it checks for if those zombies have the tag and then limit the entites to 1 which is how it costs performance compared to the below example:

--- After Example
@e[limit=1,type=zombie,tag=example_9]
---

This can save some miliseconds because the game limits the entites by 1 first, sorts by zombies and then checks the tags. But at times can the selector be shortened to be faster

__________________________________________________________________
| Rule 4. Replace nbt checks with predicate checks (if possible) |
Nbt checks cost a fair bit of that juicy TPS performance so if a predicate can replace a nbt check: (NBT: OnGround, Predicate: is_on_ground)

--- Before Example
execute as @a[nbt={OnGround:1b}] run say hi
---

Replace the nbt check with a predicate check as the below example saves some potential miliseconds depending on the amount of usage

--- After Example
execute as @a[predicate=example:example] run say hi
---

_________________________
| Rule 5. Use Tag Trees |
Tag trees are useful for if theres a single @e command that targets multiple types that does their own functions in 1 function. It can check if the entity has the tag and run the right function.

________________________________________
| Rule 6. Use as less macros as needed |
Macros an 1.20.2+ feature that data packs can use doubles the time it takes for a function 2 times and this dramatically worsens the TPS as more and more are used on loop.